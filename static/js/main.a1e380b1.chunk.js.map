{"version":3,"sources":["services/ipfs.js","actions/types.js","actions/index.js","services/identicon.js","components/Footer.js","components/NftCarousel.js","components/NftDescription.js","components/AuctionForm.js","components/Days365Form.js","components/ContractForms.js","components/Alert.js","components/App.js","serviceWorker.js","reducers/contracts.js","reducers/index.js","services/configureStore.js","index.js","services/helpers.js"],"names":["ipfs","require","process","NFT_UPDATE","contractsInit","userConnect","_ref","Object","asyncToGenerator","regenerator_default","a","mark","_callee","dispatch","_window","ethereum","accounts","provider","signer","data","wrap","_context","prev","next","window","setAlert","abrupt","request","method","sent","length","ethers","providers","Web3Provider","getSigner","account","toLowerCase","day365","Contract","nftContractJSON","abi","auctioner","auctionerContractJSON","t0","Number","t1","utils","currentFee","t2","t3","formatEther","call","parseFloat","contractsConnected","type","payload","nftsDataInit","t4","console","log","stop","_x","apply","this","arguments","variant","message","_ref2","_callee2","getState","_context2","_x2","_x3","_ref3","_callee3","contract","tokensCount","i","_context3","contracts","nftInit","_x4","_x5","nftId","_ref4","_callee4","nftsInitial","switchUpdate","file","tokenUri","owner","_context4","nfts","tokenURI","ownerOf","getDefaultNft","uri","axios","url","responseType","concat","name","description","image","location","attributes","filter","trait_type","value","temperature","id","wasInit","auctionInit","_x6","_x7","isUpdate","_ref5","_callee5","nftState","auction","bid","timestamp","price","winner","formatAuction","_context5","getAuction","getBid","constants","AddressZero","toNumber","isWinner","isStarted","isEnded","Date","isOwner","totalBid","_x8","_x9","mintNft","callback","_ref6","_callee6","d","imgBuffer","imgResponse","metadata","jsonBuffer","metadataResp","metadataHash","eventFilter","_context6","toString","day365Loading","getDate","getMonth","getFullYear","getBuffer","files","add","getIpfsLink","hash","getMetadata","getBufferFromJson","parseInt","filters","Transfer","on","event","isLoading","setCurrentNft","mintToken","parseEther","_x10","_x11","updateNftUri","_ref7","_callee7","currentNftId","currentNft","_context7","UriChange","setTokenURI","_x12","_x13","startAuction","startPrice","daysEnd","_ref8","_callee10","approvalEvent","auctionStartEvent","_context10","auctionLoading","Approval","address","Start","_ref9","_callee8","_context8","start","_x16","_x17","_ref10","_callee9","_context9","_x18","_x19","approve","_x14","_x15","cancelAuction","_ref11","_callee12","cancelEvent","_context12","Cancel","_ref12","_callee11","_context11","_x22","_x23","cancel","_x20","_x21","bidAuction","_ref13","_callee14","nextPrice","bidEvent","_context14","Bid","_ref14","_callee13","_context13","_x26","_x27","_x24","_x25","endAuction","_ref15","_callee16","nextOwner","endEvent","_context16","End","_ref16","_callee15","_context15","_x30","_x31","end","_x28","_x29","withdrawAuction","_ref17","_callee18","withdrawEvent","_context18","Withdraw","_ref18","_callee17","_context17","_x34","_x35","withdraw","_x32","_x33","_ref19","_callee19","_context19","_x36","_x37","switchUpdateChange","_ref20","_callee20","_context20","_x38","_x39","identiconLib","identiconAsync","size","ref","generate","err","buffer","current","src","Footer","props","react_default","createElement","assign","className","style","padding","href","marginRight","textDecoration","backgroundColor","compose","connect","state","actions","carouselView","onSelect","nftPlaceholder","Carousel","Item","key","Image","alt","width","height","objectFit","Caption","activeIndex","maxWidth","background","cards","forEach","nft","push","getOwner","color","marginBottom","fontWeight","margin","Button","react_router_dom","onClick","to","nftItem","getItems","carouselViewHandler","useParams","navigate","useNavigate","bidFormRef","useRef","ownerIdentRef","auctionSellerIdentRef","auctionWinnerIdentRef","bidHandler","useEffect","Fragment","Table","striped","bordered","e","Container","Row","hidden","checkWalletAddress","getDateFromMiliseconds","Form","Group","controlId","Label","Control","placeholder","disabled","Spinner","as","animation","role","aria-hidden","position","left","top","opacity","zIndex","marginTop","marginLeft","right","textAlign","auctionFormRef","auctionHandler","preventDefault","daysFormRef","_useState","useState","_useState2","slicedToArray","previewImg","setPreview","_useState3","_useState4","setFile","setDataOnForm","interactHandler","fluid","Col","md","Card","Img","Body","File","onChange","previewImage","accept","label","getButtonDescription","components_Days365Form","AuctionForm","alertMessage","alerts","setAlerts","setTimeout","showAllert","Alert","saveSubscribe","accountRef","contractRef","switchRef","setCarouselView","idx","unsubscibeSave","checked","components_Alert","minHeight","Navbar","bg","Brand","Nav","alignItems","defineProperty","Switch","target","Link","shortHash","react_router","path","element","components_NftDescription","components_NftCarousel","components_ContractForms","components_Footer","Boolean","hostname","match","INITIAL_STATE","combineReducers","undefined","action","nftsArr","nftIdx","objectSpread","toConsumableArray","auctionObj","composedEnhancer","composeWithDevTools","applyMiddleware","reduxThunk","store","createStore","day365Nfts","localStorage","getItem","JSON","parse","loadState","ReactDOM","render","es","components_App","subscribe","throttle","setItem","stringify","_unused","saveState","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","Buffer","__webpack_require__","__webpack_exports__","ethers__WEBPACK_IMPORTED_MODULE_0__","slice","showFull","wallet","user","miliseconds","date","monthString","substring","getHours","getMinutes","URL","createObjectURL","filenmae","Promise","resolve","reject","reader","FileReader","readAsArrayBuffer","onload","from","result","onerror","error","fileJson","json","blob","Blob","getDefaultAuction"],"mappings":"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","file":"static/js/main.a1e380b1.chunk.js","sourcesContent":["const IPFS = require('ipfs-api');\r\n\r\nconst ipfs = new IPFS(process.env.REACT_APP_IPFS_CONNECT_URL);\r\n\r\nexport default ipfs;","export const CONTRACTS_DATA_INIT =  \"contracts_data\";\r\nexport const NFT_UPDATE =  \"nft_update\";\r\nexport const AUCTION_UPDATE =  \"auction_update\";\r\nexport const CONTRACTS_UPDATE = \"contracts_update\";\r\nexport const SHOW_ALERT = \"show_alert\";","import nftContractJSON from '../abis/Days365.json';\r\nimport auctionerContractJSON from '../abis/Auctioner.json';\r\nimport { ethers } from 'ethers';\r\nimport axios from 'axios';\r\nimport { getBuffer, getBufferFromJson, getIpfsLink, getDefaultNft, getMetadata } from '../services/helpers';\r\nimport ipfs from '../services/ipfs';\r\n\r\nimport { CONTRACTS_DATA_INIT, CONTRACTS_UPDATE, AUCTION_UPDATE, NFT_UPDATE, SHOW_ALERT } from './types';\r\n\r\nexport const contractsInit = (userConnect) => async dispatch => {\r\n    const { ethereum } = window;\r\n\r\n    if(!ethereum){\r\n      dispatch(setAlert(\"warning\", \"Make sure you have Metamask installed!\"));\r\n      return;\r\n    }\r\n\r\n    try{\r\n        let accounts;\r\n\r\n        if(userConnect) {\r\n            accounts = await ethereum.request({method: 'eth_requestAccounts'});\r\n        }\r\n        else {\r\n            accounts = await ethereum.request({method: 'eth_accounts'});\r\n        }\r\n    \r\n        if(accounts.length !== 0) {\r\n            dispatch(setAlert(\"info\", \"Connecting authorized account: \"  + accounts[0]));\r\n            const provider = new ethers.providers.Web3Provider(ethereum);\r\n            const signer = provider.getSigner();\r\n\r\n            const data = {};\r\n            data.account = accounts[0].toLowerCase();\r\n            data.day365 = new ethers.Contract(process.env.REACT_APP_CONTRACT_ADDRESS, nftContractJSON.abi, signer);\r\n            data.auctioner = new ethers.Contract(process.env.REACT_APP_AUCTIONER_ADDRESS, auctionerContractJSON.abi, signer);\r\n            data.currentFee = Number.parseFloat(ethers.utils.formatEther((await data.day365.currentFee())));\r\n            data.contractsConnected = true;\r\n\r\n            dispatch({\r\n                type: CONTRACTS_DATA_INIT,\r\n                payload: data\r\n            });\r\n            dispatch(nftsDataInit());\r\n        }\r\n        else {\r\n          dispatch(setAlert(\"warning\", \"Connecting to wallet failed!\"));\r\n        }\r\n    } catch(err)\r\n    {\r\n        console.log(err);\r\n        dispatch(setAlert(\"danger\", \"Connecting to wallet failed!\"));\r\n    }\r\n}\r\n\r\nexport const setAlert = (variant, message) => async (dispatch, getState) => {\r\n    dispatch({\r\n        type: SHOW_ALERT, payload: {variant, message}\r\n    });\r\n}\r\n\r\nconst nftsDataInit = () => async (dispatch, getState) => {\r\n    const contract = getState().contracts.day365;\r\n    let tokensCount = await contract.tokensCount();\r\n\r\n    for(let i=0 ; i<tokensCount; i++) {\r\n        dispatch(nftInit(i+1));\r\n    }\r\n}\r\n\r\nexport const nftInit = (nftId) => async (dispatch, getState) => {\r\n    let data = {};\r\n    const nftsInitial = getState().contracts.nfts;\r\n    const switchUpdate = getState().contracts.switchUpdate;\r\n\r\n    if(switchUpdate || !nftsInitial[nftId-1])\r\n    {\r\n        let file;\r\n        const contract = getState().contracts.day365;\r\n        const tokenUri = await contract.tokenURI(nftId);\r\n        const owner = await contract.ownerOf(nftId);\r\n        \r\n        data = getDefaultNft(nftId);\r\n        data.uri = tokenUri;\r\n        data.owner = owner.toLowerCase();\r\n    \r\n        try {\r\n            file = await axios({\r\n                url: tokenUri,\r\n                method: 'GET',\r\n                responseType: 'json'\r\n            });\r\n        }\r\n        catch(err) {\r\n            console.log(err);\r\n            dispatch(setAlert(\"danger\", `Nft data fetch failed for nftId: ${nftId}`));\r\n        }\r\n    \r\n        if(file) {\r\n            data.name = file.data.name;\r\n            data.description = file.data.description;\r\n            data.image = file.data.image;\r\n            data.location = file.data.attributes.filter(a => a.trait_type === \"location\")[0].value;\r\n            data.temperature = file.data.attributes.filter(a => a.trait_type === \"temperature\")[0].value;\r\n        }\r\n\r\n        dispatch({\r\n            type: NFT_UPDATE,\r\n            payload: data\r\n        });\r\n    }\r\n    else {\r\n        dispatch({\r\n            type: NFT_UPDATE,\r\n            payload: {\r\n                id: nftId, wasInit: !switchUpdate\r\n            }\r\n        });\r\n    }\r\n\r\n    dispatch(auctionInit(nftId, false));\r\n}\r\n\r\nconst auctionInit = (nftId, isUpdate) => async (dispatch, getState) => {\r\n    const nftState = getState().contracts.nfts[nftId-1];\r\n    const account = getState().contracts.account;\r\n    const switchUpdate = getState().contracts.switchUpdate;\r\n\r\n    if(isUpdate || switchUpdate || !nftState.auction.wasInit) {\r\n        const auctioner = getState().contracts.auctioner;\r\n    \r\n        const auction = await auctioner.getAuction(nftId);\r\n        const bid = await auctioner.getBid(nftId);\r\n    \r\n        const owner = auction[0] ? auction[0].toLowerCase() : ethers.constants.AddressZero;\r\n        const timestamp = auction[1].toNumber();\r\n        const price = ethers.utils.formatEther(auction[2]);\r\n        const winner = auction[3] ? auction[3].toLowerCase() : ethers.constants.AddressZero;\r\n    \r\n        const formatAuction = {\r\n            nftId: nftId,\r\n            owner: owner,\r\n            timestamp: timestamp,\r\n            price: price,\r\n            winner: winner,\r\n            isWinner: winner === account.toLowerCase(),\r\n            isStarted: timestamp !== 0,\r\n            isEnded: timestamp !== 0 && (new Date(timestamp*1000)) < (new Date()),\r\n            isOwner: owner === account.toLowerCase(),\r\n            totalBid: ethers.utils.formatEther(bid),\r\n            wasInit: true\r\n        };\r\n    \r\n        dispatch({\r\n            type: AUCTION_UPDATE,\r\n            payload: formatAuction\r\n        });\r\n\r\n        dispatch({\r\n            type: NFT_UPDATE,\r\n            payload: {\r\n                id: nftId,\r\n                wasInit: true\r\n            }\r\n        });\r\n    }    \r\n    else if ((account.toLowerCase() === nftState.auction.owner && !nftState.auction.isOwner) || \r\n        (account.toLowerCase() === nftState.auction.winner && !nftState.auction.isWinner)) {\r\n        dispatch({\r\n            type: AUCTION_UPDATE,\r\n            payload: {\r\n                nftId: nftId,\r\n                isOwner: nftState.auction.owner === account.toLowerCase(),\r\n                isWinner: nftState.auction.winner === account.toLowerCase()\r\n            }\r\n        });\r\n    }\r\n}\r\n\r\nexport const mintNft = (file, description, temperature, location, callback) => async (dispatch, getState) => {\r\n    const contract = getState().contracts.day365;\r\n    const account = getState().contracts.account;\r\n    const currentFee = getState().contracts.currentFee.toString();\r\n\r\n    try {\r\n        dispatch({\r\n            type: CONTRACTS_UPDATE, payload: {day365Loading: true}\r\n        });\r\n\r\n        const d = new Date();\r\n        const name = d.getDate()  + \".\" + (d.getMonth()+1) + \".\" + d.getFullYear();\r\n        let image;\r\n        let id;\r\n\r\n        if(file) {\r\n            const imgBuffer =  await getBuffer(file);\r\n            const imgResponse = await ipfs.files.add(imgBuffer);\r\n            image = getIpfsLink(imgResponse[0].hash, file.name);\r\n        } \r\n\r\n        const metadata = getMetadata(name, description, image, location, temperature);\r\n        const jsonBuffer = await getBufferFromJson(metadata);\r\n        const metadataResp = await ipfs.files.add(jsonBuffer);\r\n        const metadataHash = metadataResp[0].hash;\r\n        const uri = getIpfsLink(metadataHash, metadata.name);\r\n\r\n        id = parseInt(await contract.tokensCount()) + 1;\r\n        const eventFilter = contract.filters.Transfer(ethers.constants.AddressZero, account, id);\r\n\r\n        contract.provider.on(eventFilter, (log, event) => {\r\n            dispatch({\r\n                type: NFT_UPDATE, \r\n                payload: {\r\n                    id, uri, name, description, location, temperature, image,\r\n                    owner: account,\r\n                    isLoading: false\r\n                }\r\n            });\r\n\r\n            dispatch({\r\n                type: AUCTION_UPDATE, \r\n                payload: {\r\n                    nftId: id,\r\n                    owner: ethers.constants.AddressZero,\r\n                    timestamp: 0,\r\n                    price: 0,\r\n                    winner: ethers.constants.AddressZero,\r\n                    isWinner: false,\r\n                    isStarted: false,\r\n                    isEnded: false,\r\n                    isOwner: false,\r\n                    totalBid: 0\r\n                }\r\n            });\r\n\r\n            dispatch({\r\n                type: CONTRACTS_UPDATE, payload: {day365Loading: false}\r\n            });\r\n\r\n            dispatch(setCurrentNft(id));\r\n            \r\n            if(callback) {\r\n                callback(id);\r\n            }\r\n\r\n            dispatch(setAlert(\"success\", \"Minting succeed!\"));\r\n        });\r\n\r\n        await contract.mintToken(uri, {value: ethers.utils.parseEther(currentFee)});\r\n      } \r\n      catch(e) {\r\n        console.log(e);\r\n        dispatch({\r\n            type: CONTRACTS_UPDATE, payload: {day365Loading: false}\r\n        });\r\n        dispatch(setAlert(\"danger\", \"Miniting failed!\"));\r\n      }\r\n}\r\n\r\nexport const updateNftUri = (nftId, file, description, temperature, location, callback) => async (dispatch, getState) => {\r\n    const currentNftId = Number.parseInt(nftId);\r\n    const contract = getState().contracts.day365;\r\n    const currentNft = getState().contracts.nfts[currentNftId-1];\r\n\r\n    try {\r\n        dispatch({\r\n            type: CONTRACTS_UPDATE, payload: {day365Loading: true}\r\n        });\r\n\r\n        let image = currentNft.image;\r\n        let name = currentNft.name;\r\n\r\n        if(file) {\r\n            const imgBuffer =  await getBuffer(file);\r\n            const imgResponse = await ipfs.files.add(imgBuffer);\r\n            image = getIpfsLink(imgResponse[0].hash, file.name);\r\n        }\r\n\r\n        const metadata = getMetadata(name, description, image, location, temperature);\r\n        const jsonBuffer = await getBufferFromJson(metadata);\r\n        const metadataResp = await ipfs.files.add(jsonBuffer);\r\n        const metadataHash = metadataResp[0].hash;\r\n        const uri = getIpfsLink(metadataHash, metadata.name);\r\n        const eventFilter = contract.filters.UriChange(currentNftId, null);\r\n\r\n        contract.provider.on(eventFilter, (log, event) => {\r\n            dispatch({\r\n                type: NFT_UPDATE, \r\n                payload: {\r\n                    id: currentNftId, uri, name, description, location, temperature, image\r\n                }\r\n            });\r\n\r\n            dispatch({\r\n                type: CONTRACTS_UPDATE, payload: {day365Loading: false}\r\n            });\r\n            \r\n            if(callback) {\r\n                callback(currentNftId);\r\n            }\r\n\r\n            dispatch(setAlert(\"success\", \"Update URI succeed!\"));\r\n        });\r\n\r\n        await contract.setTokenURI(currentNftId, uri);\r\n      } \r\n      catch (e) {\r\n        console.log(e);\r\n        dispatch({\r\n            type: CONTRACTS_UPDATE, payload: {day365Loading: false}\r\n        });\r\n        dispatch(setAlert(\"danger\", `Updating URI failed for nftId: ${nftId}`));\r\n      }\r\n}\r\n\r\nexport const startAuction = (nftId, startPrice, daysEnd, callback) => async (dispatch, getState) => {\r\n    const currentNftId = Number.parseInt(nftId);\r\n    const contract = getState().contracts.day365;\r\n    const auctioner = getState().contracts.auctioner;\r\n    const account = getState().contracts.account;\r\n\r\n    try {\r\n        dispatch({\r\n            type: CONTRACTS_UPDATE, payload: {auctionLoading: true}\r\n        });\r\n\r\n        let approvalEvent = contract.filters.Approval(account, auctioner.address, currentNftId);\r\n        let auctionStartEvent = auctioner.filters.Start(currentNftId, null, null);\r\n        \r\n        contract.provider.on(approvalEvent, async (log, event) => {\r\n            await auctioner.start(currentNftId, ethers.utils.parseEther(startPrice), daysEnd);\r\n        });\r\n\r\n        auctioner.provider.on(auctionStartEvent, async (log, event) => {\r\n            dispatch(auctionInit(currentNftId, true));\r\n\r\n            dispatch({\r\n                type: NFT_UPDATE, payload: {\r\n                    id: currentNftId,\r\n                    owner: process.env.REACT_APP_AUCTIONER_ADDRESS.toLowerCase()\r\n                }\r\n            });\r\n\r\n            dispatch({\r\n                type: CONTRACTS_UPDATE, payload: {auctionLoading: false}\r\n            });\r\n\r\n            if(callback) {\r\n                callback();\r\n            }\r\n\r\n            dispatch(setAlert(\"success\", \"Start auction succeed!\"));\r\n        });\r\n\r\n        await contract.approve(auctioner.address, currentNftId);\r\n    } \r\n    catch (e) {\r\n        console.log(e);\r\n        dispatch({\r\n            type: CONTRACTS_UPDATE, payload: {auctionLoading: false}\r\n        });\r\n        dispatch(setAlert(\"danger\", `Start auction failed for nftId: ${nftId}`));\r\n    }\r\n}\r\n\r\nexport const cancelAuction = (nftId) => async (dispatch, getState) => {\r\n    const currentNftId = Number.parseInt(nftId);\r\n    const auctioner = getState().contracts.auctioner;\r\n    const account = getState().contracts.account;\r\n\r\n    try {\r\n        dispatch({\r\n            type: NFT_UPDATE, payload: {id: currentNftId, isLoading: true}\r\n        });\r\n\r\n        let cancelEvent = auctioner.filters.Cancel(currentNftId, null);\r\n        \r\n        auctioner.provider.on(cancelEvent, async (log, event) => {\r\n            dispatch({\r\n                type: AUCTION_UPDATE, payload: {\r\n                    nftId: currentNftId, \r\n                    timestamp: 0,\r\n                    isStarted: false,\r\n                    price: 0\r\n                }\r\n            });\r\n\r\n            dispatch({\r\n                type: NFT_UPDATE, payload: {\r\n                    id: currentNftId, \r\n                    owner: account, \r\n                    isLoading: false\r\n                }\r\n            });\r\n\r\n            dispatch(setAlert(\"success\", \"Cancel auction succeed!\"));\r\n        });\r\n\r\n        await auctioner.cancel(currentNftId);\r\n    } \r\n    catch (e) {\r\n        console.log(e);\r\n        dispatch({\r\n            type: NFT_UPDATE, payload: {id: currentNftId, isLoading: false}\r\n        });\r\n        dispatch(setAlert(\"danger\", `Cancel auction failed for nftId: ${nftId}`));\r\n    }\r\n}\r\n\r\nexport const bidAuction = (nftId, price, callback) => async (dispatch, getState) => {\r\n    const currentNftId = Number.parseInt(nftId);\r\n    const auctioner = getState().contracts.auctioner;\r\n    const account = getState().contracts.account;\r\n    const auction = getState().contracts.nfts[currentNftId-1].auction;\r\n    let nextPrice = Number.parseFloat(price);\r\n\r\n    try {\r\n        if(auction.winner === account) {\r\n            nextPrice = Number.parseFloat(auction.price) + nextPrice;\r\n        }\r\n        \r\n        dispatch({\r\n            type: NFT_UPDATE, payload: {id: currentNftId, isLoading: true}\r\n        });\r\n\r\n        let bidEvent = auctioner.filters.Bid(currentNftId, account, null);\r\n        \r\n        auctioner.provider.on(bidEvent, async (log, event) => {\r\n            dispatch({\r\n                type: AUCTION_UPDATE, payload: {\r\n                    nftId: currentNftId,\r\n                    price: nextPrice,\r\n                    winner: account,\r\n                    isWinner: true,\r\n                    totalBid: nextPrice\r\n                }\r\n            });\r\n\r\n            dispatch({\r\n                type: NFT_UPDATE, payload: {id: currentNftId, isLoading: false}\r\n            });\r\n\r\n            if(callback) {\r\n                callback();\r\n            }\r\n\r\n            dispatch(setAlert(\"success\", \"Bid auction succeed!\"));\r\n        });\r\n\r\n        await auctioner.bid(currentNftId, {value: ethers.utils.parseEther(price)});\r\n    } \r\n    catch (e) {\r\n        console.log(e);\r\n        dispatch({\r\n            type: NFT_UPDATE, payload: {id: currentNftId, isLoading: false}\r\n        });\r\n        dispatch(setAlert(\"danger\", `Bid auction failed for nftId: ${nftId}`));\r\n    }\r\n}\r\n\r\nexport const endAuction = (nftId) => async (dispatch, getState) => {\r\n    const currentNftId = Number.parseInt(nftId);\r\n    const auctioner = getState().contracts.auctioner;\r\n    const account = getState().contracts.account;\r\n    const auction = getState().contracts.nfts[currentNftId-1].auction;\r\n    let nextOwner = account;\r\n\r\n    try {\r\n        if(auction.winner !== ethers.constants.AddressZero) {\r\n            nextOwner = auction.winner;\r\n        }\r\n        \r\n        dispatch({\r\n            type: NFT_UPDATE, payload: {id: currentNftId, isLoading: true}\r\n        });\r\n\r\n        let endEvent = auctioner.filters.End(currentNftId, null, null);\r\n        \r\n        auctioner.provider.on(endEvent, async (log, event) => {\r\n            dispatch({\r\n                type: AUCTION_UPDATE, payload: {\r\n                    nftId: currentNftId,\r\n                    timestamp: 0,\r\n                    isStarted: false,\r\n                    price: 0,\r\n                }\r\n            });\r\n\r\n            dispatch({\r\n                type: NFT_UPDATE, payload: {\r\n                    id: currentNftId, \r\n                    owner: nextOwner,\r\n                    isLoading: false\r\n                }\r\n            });\r\n\r\n            dispatch(setAlert(\"success\", \"End auction succeed!\"));\r\n        });\r\n\r\n        await auctioner.end(currentNftId);\r\n    } \r\n    catch (e) {\r\n        console.log(e);\r\n        dispatch({\r\n            type: NFT_UPDATE, payload: {id: currentNftId, isLoading: false}\r\n        });\r\n        dispatch(setAlert(\"danger\", `End auction failed for nftId: ${nftId}`));\r\n    }\r\n}\r\n\r\nexport const withdrawAuction = (nftId) => async (dispatch, getState) => {\r\n    const currentNftId = Number.parseInt(nftId);\r\n    const auctioner = getState().contracts.auctioner;\r\n    const account = getState().contracts.account;\r\n\r\n    try {\r\n        dispatch({\r\n            type: NFT_UPDATE, payload: {id: currentNftId, isLoading: true}\r\n        });\r\n\r\n        let withdrawEvent = auctioner.filters.Withdraw(currentNftId, account, null);\r\n        \r\n        auctioner.provider.on(withdrawEvent, async (log, event) => {\r\n            dispatch({\r\n                type: AUCTION_UPDATE, payload: {\r\n                    nftId: currentNftId,\r\n                    totalBid: 0\r\n                }\r\n            });\r\n\r\n            dispatch({\r\n                type: NFT_UPDATE, payload: {id: currentNftId, isLoading: false}\r\n            });\r\n\r\n            dispatch(setAlert(\"success\", \"Withdraw succeed!\"));\r\n        });\r\n\r\n        await auctioner.withdraw(currentNftId);\r\n    } \r\n    catch (e) {\r\n        console.log(e);\r\n        dispatch({\r\n            type: NFT_UPDATE, payload: {id: currentNftId, isLoading: false}\r\n        });\r\n        dispatch(setAlert(\"danger\", `Withdraw failed for nftId: ${nftId}`));\r\n    }\r\n}\r\n\r\nexport const setCurrentNft = (nftId) => async (dispatch, getState) => {\r\n    const currentNftId = getState().contracts.currentNftId;\r\n    const switchUpdate = getState().contracts.switchUpdate;\r\n\r\n    if(nftId > 0) {\r\n        dispatch({\r\n            type: CONTRACTS_UPDATE, payload: {currentNftId: Number.parseInt(nftId)}\r\n        });\r\n    } \r\n    else {\r\n        dispatch({\r\n            type: NFT_UPDATE,\r\n            payload: {\r\n                id: currentNftId, wasInit: !switchUpdate\r\n            }\r\n        });\r\n\r\n        dispatch({\r\n            type: CONTRACTS_UPDATE, payload: {currentNftId: null}\r\n        });\r\n    }\r\n}\r\n\r\nexport const switchUpdateChange = (value) => async (dispatch, getState) => {\r\n    const nfts = getState().contracts.nfts;\r\n    const currentNftId = getState().contracts.currentNftId;\r\n\r\n    dispatch({\r\n        type: CONTRACTS_UPDATE, payload: {switchUpdate: !!value}\r\n    });\r\n\r\n    for (let nftId = 1; nftId <= nfts.length; nftId++) {\r\n        if(currentNftId == nftId) {\r\n            continue;\r\n        }\r\n\r\n        dispatch({\r\n            type: NFT_UPDATE,\r\n            payload: {\r\n                id: nftId, wasInit: !value\r\n            }\r\n        });\r\n    }\r\n}\r\n\r\n","const identiconLib = require('identicon')\r\n\r\n// Asynchronous API\r\nconst identiconAsync = (id, size, ref) => {\r\n    if(id == null) return;\r\n\r\n    identiconLib.generate({id, size}, (err, buffer) => {\r\n        if (err) throw err\r\n        ref.current.src = buffer;\r\n    });\r\n} \r\n\r\n// Synchronous API\r\nconst identicon = (id, size) => {\r\n    return identiconLib.generateSync({id, size});\r\n}\r\n\r\nexport {\r\n    identicon,\r\n    identiconAsync\r\n}","import React from 'react';\r\n\r\nfunction Footer(props) {\r\n    return(\r\n    <footer className=\"text-center text-lg-start bg-dark text-muted\" {...props}>\r\n        <section\r\n          className=\"d-flex justify-content-center justify-content-lg-between border-bottom\"\r\n          style={{padding: '1rem'}}\r\n        >\r\n          <div className=\"me-5 d-none d-lg-block\">\r\n            <span>Check my social networks:</span>\r\n          </div>\r\n\r\n          <div>\r\n            <a href=\"https://www.facebook.com/adrian.kochanski.77\" className=\"me-4 text-reset\" style={{marginRight: '0.5rem', textDecoration: 'none'}}>\r\n              <i className=\"icon-facebook-sign\"></i>\r\n            </a>\r\n            <a href=\"https://twitter.com/Adrian12560493\" className=\"me-4 text-reset\" style={{marginRight: '0.5rem', textDecoration: 'none'}}>\r\n              <i className=\"icon-twitter-sign\"></i>\r\n            </a>\r\n            <a href=\"https://www.instagram.com/adrioss_k/\" className=\"me-4 text-reset\" style={{marginRight: '0.5rem', textDecoration: 'none'}}>\r\n              <i className=\"icon-instagram\"></i>\r\n            </a>\r\n            <a href=\"https://www.linkedin.com/in/adrian-kocha%C5%84ski-228a32174/\" className=\"me-4 text-reset\" style={{marginRight: '0.5rem', textDecoration: 'none'}}>\r\n              <i className=\"icon-linkedin-sign\"></i>\r\n            </a>\r\n            <a href=\"https://github.com/AdrianKochanski\" className=\"me-4 text-reset\" style={{textDecoration: 'none'}}>\r\n              <i className=\"icon-github-sign\"></i>\r\n            </a>\r\n          </div>\r\n        </section>\r\n\r\n        <section className=\"\">\r\n          <div className=\"container text-center text-md-start\">\r\n            <div className=\"row mt-4\">\r\n              <div className=\"col-md-3 col-lg-4 col-xl-3 mx-auto\">\r\n                <h6 className=\"text-uppercase fw-bold mb-3\">\r\n                  <i className=\"fas fa-gem me-3\"></i>Author\r\n                </h6>\r\n                <p>\r\n                    This website was created to explore the possibilities of a rapidly evolving technology that is the world of crypto defi and NFT!\r\n                </p>\r\n              </div>\r\n\r\n              <div className=\"col-md-3 col-lg-2 col-xl-2 mx-auto\">\r\n                <h6 className=\"text-uppercase fw-bold mb-3\">\r\n                  Useful links\r\n                </h6>\r\n                <p>\r\n                  <a href=\"https://github.com/AdrianKochanski\" className=\"text-reset\">Github</a>\r\n                </p>\r\n              </div>\r\n\r\n              <div className=\"col-md-4 col-lg-3 col-xl-3 mx-auto mb-md-0\">\r\n                <h6 className=\"text-uppercase fw-bold mb-3\">\r\n                  Contact\r\n                </h6>\r\n                <p><i className=\"icon-home\"></i> Męcina, 34-654 Męcina, PL</p>\r\n                <p><i className=\"icon-envelope\"></i>adrian.k960607@gmail.com</p>\r\n                <p><i className=\"icon-phone\"></i> + 48 734 604 238</p>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </section>\r\n\r\n        <div className=\"text-center p-3\" style={{backgroundColor: 'rgba(0, 0, 0, 0.05)'}}>\r\n          © 2022 Copyright: Adrian Kochański\r\n        </div>\r\n    </footer>\r\n    );\r\n}\r\n\r\nexport default Footer;","import React from 'react';\r\nimport { Carousel, Button, Image } from 'react-bootstrap';\r\nimport propTypes from 'prop-types';\r\nimport { connect } from 'react-redux';\r\nimport { compose } from 'redux';\r\nimport * as actions from '../actions/index';\r\nimport { Link } from \"react-router-dom\";\r\n\r\nimport { getOwner } from '../services/helpers';\r\n\r\nfunction NftCarousel({nfts, account, carouselView, onSelect, setCurrentNft}) {\r\n\r\n    const nftPlaceholder = (id) => {\r\n        return (\r\n            <Carousel.Item key={id}>\r\n                    <Image\r\n                        className=\"d-block\"\r\n                        src=\"placeholder-image.png\"\r\n                        alt={\"No Owner...\"}\r\n                        style={{width: '46rem', height: '28rem', objectFit: 'cover'}}\r\n                    />\r\n                    <Carousel.Caption>\r\n                        <h3>No name...</h3>\r\n                        <p>Should be description</p>\r\n                    </Carousel.Caption>\r\n                </Carousel.Item>\r\n        );\r\n    }\r\n\r\n    const nftItem = (nft) => {\r\n        return (\r\n            nft ?\r\n            <Carousel.Item key={nft.id}>\r\n                <Image\r\n                    className=\"d-block\"\r\n                    src={nft.image ? nft.image : \"placeholder-image.png\"}\r\n                    alt={\"Owned by: \" + getOwner(nft, account, false)}\r\n                    style={{width: '46rem', height: '28rem', objectFit: 'cover'}}\r\n                />\r\n                <Carousel.Caption>\r\n                    {(nft && nft.auction && nft.auction.isStarted && !nft.auction.isEnded) ? \r\n                     <p style={{backgroundColor: 'blue', color: 'yellow', marginBottom: '0px', fontWeight: 'bold', width: '170px', margin: 'auto'}}>{getOwner(nft, account, false) + \" \" + nft.auction.price + \" ETH\"}</p> : \r\n                     <p style={{backgroundColor: 'white', color: 'black', marginBottom: '0px', fontWeight: 'bold', width: '170px', margin: 'auto'}}>{getOwner(nft, account, false)}</p>\r\n                    }\r\n                <Button \r\n                    style={{margin: '5px 0px 5px 0px'}}\r\n                    variant=\"primary\" \r\n                    type=\"button\">\r\n                    <p style={{marginBottom: '0px'}}>\r\n                        <Link\r\n                        onClick={() => {setCurrentNft(nft.id)}}\r\n                        style={{textDecoration: 'none', color: 'white'}}\r\n                        to={`/nfts/${nft.id}`}\r\n                        key={nft.id}>\r\n                            {nft.uri && nft.name ? \"#\" + nft.name : \"Details..\"}\r\n                        </Link>\r\n                    </p>\r\n                </Button>\r\n                <p style={{marginBottom: '0px'}}>{nft.description}</p>\r\n                </Carousel.Caption>\r\n            </Carousel.Item>\r\n            : nftPlaceholder(nft.id)\r\n        );\r\n    }\r\n\r\n    const getItems = () => {\r\n        const cards = [];\r\n    \r\n        if(nfts && nfts.length > 0) {\r\n            nfts.forEach(nft => {\r\n                cards.push(\r\n                    nftItem(nft)\r\n                );\r\n            });\r\n        } \r\n        else {\r\n            cards.push(\r\n                nftPlaceholder(0)\r\n            );\r\n        }\r\n        \r\n        return cards;\r\n    };\r\n\r\n    return (\r\n        <Carousel activeIndex={carouselView} onSelect={onSelect} style={{maxWidth: '46rem', background: 'gray'}}>\r\n            {getItems()}\r\n        </Carousel>\r\n    );\r\n}\r\n\r\nNftCarousel.propTypes = {\r\n    account: propTypes.string.isRequired,\r\n    nfts: propTypes.array\r\n};\r\n\r\nfunction mapStateToProps(state) {\r\n  return {\r\n      account: state.contracts.account,\r\n      nfts: state.contracts.nfts\r\n  };\r\n}\r\n\r\nexport default compose(\r\n  connect(mapStateToProps, actions)\r\n)(NftCarousel);","import React , { useRef, useEffect } from 'react';\r\nimport { Table, Button, Container, Row, Image, Form, Spinner } from 'react-bootstrap';\r\nimport {getOwner, checkWalletAddress, getDateFromMiliseconds, getDefaultNft} from '../services/helpers';\r\nimport { identiconAsync } from '../services/identicon';\r\nimport { ethers } from 'ethers';\r\nimport propTypes from 'prop-types';\r\nimport { connect } from 'react-redux';\r\nimport { compose } from 'redux';\r\nimport * as actions from '../actions/index';\r\nimport { useParams, useNavigate } from \"react-router-dom\";\r\nimport throttle from 'lodash/throttle';\r\n\r\nfunction NftDescription({nfts, carouselViewHandler, account, cancelAuction, bidAuction, endAuction, withdrawAuction, setCurrentNft, nftInit, contractsConnected, switchUpdate}) {\r\n    const { id } = useParams();\r\n    const navigate = useNavigate();\r\n    const currentNft = nfts[id-1] ? nfts[id-1] : getDefaultNft(id);\r\n    const bidFormRef = useRef(null);\r\n    const ownerIdentRef = useRef(null);\r\n    const auctionSellerIdentRef = useRef(null);\r\n    const auctionWinnerIdentRef = useRef(null);\r\n    const auction = currentNft.auction;\r\n    const isLoading = currentNft.isLoading;\r\n    const wasInit = currentNft.wasInit;\r\n\r\n    const bidHandler = async () => {\r\n        const price = bidFormRef.current[0].value;\r\n\r\n        bidAuction(id, price, () => {\r\n            bidFormRef.current[0].value = null;\r\n        });\r\n    }\r\n\r\n    useEffect(() => {\r\n        if(contractsConnected) {\r\n            nftInit(Number.parseInt(id));\r\n        }\r\n        else {\r\n            setCurrentNft(id);\r\n        }\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        identiconAsync(currentNft.owner, 50, ownerIdentRef);\r\n    }, [currentNft]);\r\n\r\n    useEffect(() => {\r\n        identiconAsync(auction.owner, 50, auctionSellerIdentRef);\r\n        identiconAsync(auction.winner, 50, auctionWinnerIdentRef);\r\n    }, [auction]);\r\n\r\n    return (\r\n        <>\r\n            <Table style={{width: '46rem'}} striped bordered variant=\"dark\">\r\n                <thead>\r\n                    <tr>\r\n                        <th>\r\n                            <Table variant=\"dark\" style={{marginBottom: '0px'}}>\r\n                                <thead>\r\n                                    <tr>\r\n                                        <th> {'Id: ' + currentNft.id} </th>\r\n                                    </tr>\r\n                                </thead>\r\n                                <tbody>\r\n                                    <tr>\r\n                                        <td>{\"#\" + currentNft.name}</td>\r\n                                    </tr>\r\n                                    <tr>\r\n                                        <td>{currentNft.temperature + \" °C\"}</td>\r\n                                    </tr>\r\n                                    <tr>\r\n                                        <td>{auction.price != 0 ? auction.price + ' ETH' : 'No price history'}</td>\r\n                                    </tr>\r\n                                    <tr>\r\n                                        <td>\r\n                                            <Button \r\n                                            onClick={(e) => {\r\n                                                carouselViewHandler(currentNft.id-1, e);\r\n                                                navigate(\"/\");\r\n                                                setCurrentNft(0);\r\n                                            }}\r\n                                            variant=\"primary\" \r\n                                            type=\"button\">\r\n                                            Back\r\n                                            </Button>\r\n                                        </td>\r\n                                    </tr>\r\n                                </tbody>\r\n                            </Table>\r\n                        </th>\r\n                        <th>\r\n                            <Container >\r\n                                <Row className=\"justify-content-md-center\">\r\n                                    <Image \r\n                                        style={{width: '28rem', height: '16rem', objectFit: 'cover'}}\r\n                                        src={currentNft.image}\r\n                                    />\r\n                                </Row>\r\n                            </Container>\r\n                        </th>\r\n                    </tr>\r\n                    <tr>\r\n                        <th>Property</th>\r\n                        <th>Value</th>\r\n                    </tr>\r\n                </thead>\r\n                <tbody>\r\n                    <tr>\r\n                        <td>Owner</td>\r\n                        <td>\r\n                            <Image alt='Contract' ref={ownerIdentRef} style={{width: '25px', height: '25px'}} />\r\n                            {\" \" + getOwner(currentNft, account, true)}\r\n                        </td>\r\n                    </tr>\r\n                    <tr>\r\n                        <td>Metadata Uri</td>\r\n                        <td>{currentNft.uri}</td>\r\n                    </tr>\r\n                    <tr>\r\n                        <td>Description</td>\r\n                        <td>{currentNft.description}</td>\r\n                    </tr>\r\n                    <tr>\r\n                        <td>Location Coordinates</td>\r\n                        <td>{currentNft.location}</td>\r\n                    </tr>\r\n                    <tr hidden={!(auction.isStarted)}>\r\n                        <td>Auction</td>\r\n                        <td>\r\n                            <Table variant=\"dark\" style={{marginBottom: '0px'}}>\r\n                                <tbody>\r\n                                    <tr>\r\n                                        <td>Status:</td>\r\n                                        <td>{ auction.isStarted && !auction.isEnded ? \"Pending\" : \"Ended\" }</td>\r\n                                    </tr>\r\n                                    <tr>\r\n                                        <td>Seller:</td>\r\n                                        <td>\r\n                                            <Image alt='Contract' ref={auctionSellerIdentRef} style={{width: '25px', height: '25px'}} />\r\n                                            {\" \" + checkWalletAddress(auction.owner, account, false) }\r\n                                        </td>\r\n                                    </tr>\r\n                                    <tr>\r\n                                        <td>Current Price:</td>\r\n                                        <td>{ auction.price + ' ETH'}</td>\r\n                                    </tr>\r\n                                    <tr>\r\n                                        <td>Current Winner:</td>\r\n                                        <td>\r\n                                            <Image alt='Contract' ref={auctionWinnerIdentRef} style={{width: '25px', height: '25px'}} />\r\n                                            {\" \" + checkWalletAddress(auction.winner, account, false) }\r\n                                        </td>\r\n                                    </tr>\r\n                                    <tr>\r\n                                        <td>Time End:</td>\r\n                                        <td>{ getDateFromMiliseconds(auction.timestamp*1000) }</td>\r\n                                    </tr>\r\n                                    <tr hidden={!(!auction.isEnded && !auction.isOwner)}>\r\n                                        <td>Bid:</td>\r\n                                        <td>\r\n                                            <Form ref={bidFormRef} >\r\n                                                <Form.Group className=\"mb-3\" controlId=\"amount\">\r\n                                                    <Form.Label>Amount</Form.Label>\r\n                                                    <Form.Control type=\"number\" placeholder=\"Amount\" />\r\n                                                </Form.Group>\r\n\r\n                                                <Button \r\n                                                    disabled={isLoading}\r\n                                                    onClick={bidHandler}\r\n                                                    style={{width: '5rem'}}\r\n                                                    variant=\"success\" \r\n                                                    type=\"button\">\r\n                                                    <Spinner\r\n                                                        as=\"span\"\r\n                                                        animation=\"border\"\r\n                                                        size=\"sm\"\r\n                                                        role=\"status\"\r\n                                                        aria-hidden=\"true\"\r\n                                                        hidden={!isLoading}\r\n                                                    />\r\n                                                    BID\r\n                                                </Button>\r\n                                            </Form>\r\n                                        </td>\r\n                                    </tr>\r\n                                </tbody>\r\n                            </Table>\r\n                        </td>\r\n                    </tr>\r\n                    <tr hidden={!(\r\n                            (auction.totalBid != 0 && !auction.isWinner) || \r\n                            (auction.isStarted && auction.isEnded) || \r\n                            (auction.isOwner && auction.isStarted && !auction.isEnded && auction.winner === ethers.constants.AddressZero)\r\n                        )}>\r\n                        <td>Interactions</td>\r\n                        <td>\r\n                            <Button \r\n                                disabled={isLoading}\r\n                                hidden={!(auction.isStarted && auction.isEnded)}\r\n                                onClick={() => {endAuction(id)}}\r\n                                style={{marginRight: '7px'}}\r\n                                variant=\"warning\" \r\n                                type=\"button\">\r\n                                <Spinner\r\n                                    as=\"span\"\r\n                                    animation=\"border\"\r\n                                    size=\"sm\"\r\n                                    role=\"status\"\r\n                                    aria-hidden=\"true\"\r\n                                    hidden={!isLoading}\r\n                                />\r\n                                END\r\n                            </Button>\r\n                            <Button \r\n                                disabled={isLoading}\r\n                                hidden={!(auction.totalBid != 0 && !auction.isWinner)}\r\n                                style={{marginRight: '7px'}}\r\n                                onClick={() => {withdrawAuction(id)}}\r\n                                variant=\"warning\" \r\n                                type=\"button\">\r\n                                <Spinner\r\n                                    as=\"span\"\r\n                                    animation=\"border\"\r\n                                    size=\"sm\"\r\n                                    role=\"status\"\r\n                                    aria-hidden=\"true\"\r\n                                    hidden={!isLoading}\r\n                                />\r\n                                WITHDRAW({auction.totalBid + ' ETH'})\r\n                            </Button>\r\n                            <Button \r\n                                disabled={isLoading}\r\n                                hidden={!(auction.isOwner && auction.isStarted && !auction.isEnded && auction.winner === ethers.constants.AddressZero)}\r\n                                onClick={() => {cancelAuction(id)}}\r\n                                variant=\"danger\" \r\n                                type=\"button\">\r\n                                <Spinner\r\n                                    as=\"span\"\r\n                                    animation=\"border\"\r\n                                    size=\"sm\"\r\n                                    role=\"status\"\r\n                                    aria-hidden=\"true\"\r\n                                    hidden={!isLoading}\r\n                                />\r\n                                CANCEL\r\n                            </Button>\r\n                        </td>\r\n                    </tr>\r\n                </tbody>\r\n            </Table>\r\n            <div hidden={wasInit || !switchUpdate} style={{position: 'absolute', left: '0', top: '55px', width: '100%', height: '120%', backgroundColor: 'gray', opacity: '0.5', zIndex: '10'}}>\r\n                <Spinner style={{ marginTop: '50%', marginRight: 'auto', marginLeft: 'auto', position: 'absolute', left: '0', right: '0', textAlign: 'center', width: '50px', height: '50px', color: 'white'}} \r\n                animation=\"border\" role=\"status\">\r\n                    <span className=\"visually-hidden\"></span>\r\n                </Spinner>\r\n            </div>\r\n        </>\r\n\r\n    );\r\n}\r\n\r\nNftDescription.propTypes = {\r\n    account: propTypes.string.isRequired,\r\n    nfts: propTypes.array,\r\n    contractsConnected: propTypes.bool,\r\n    switchUpdate: propTypes.bool\r\n};\r\n\r\nfunction mapStateToProps(state) {\r\n  return {\r\n      account: state.contracts.account,\r\n      nfts: state.contracts.nfts,\r\n      contractsConnected: state.contracts.contractsConnected,\r\n      switchUpdate: state.contracts.switchUpdate\r\n  };\r\n}\r\n\r\nexport default compose(\r\n  connect(mapStateToProps, actions)\r\n)(NftDescription);","import React, { useRef } from 'react';\r\nimport { Button, Form, Spinner } from 'react-bootstrap';\r\nimport propTypes from 'prop-types';\r\nimport { connect } from 'react-redux';\r\nimport { compose } from 'redux';\r\nimport * as actions from '../actions/index';\r\n\r\nconst AuctionForms = ({currentNft, startAuction, auctionLoading}) => {\r\n    const auctionFormRef = useRef(null);\r\n\r\n    const auctionHandler = async (e) => {\r\n      e.preventDefault();\r\n      const startPrice = auctionFormRef.current[0].value;\r\n      const daysEnd = auctionFormRef.current[1].value;\r\n\r\n      startAuction(currentNft.id, startPrice, daysEnd, () => {\r\n        if(auctionFormRef) {\r\n          auctionFormRef.current[0].value = null;\r\n          auctionFormRef.current[1].value = null;\r\n        }\r\n      });\r\n    }\r\n\r\n    return  (\r\n    <Form ref={auctionFormRef}>\r\n        <div>\r\n        <Form.Group className=\"mb-3\" controlId=\"price\">\r\n            <Form.Label>Start Price ETH</Form.Label>\r\n            <Form.Control type=\"number\" placeholder=\"Start Price\" />\r\n        </Form.Group>\r\n\r\n        <Form.Group className=\"mb-3\" controlId=\"endDays\">\r\n            <Form.Label>Days End</Form.Label>\r\n            <Form.Control type=\"number\" placeholder=\"Days End\" />\r\n        </Form.Group>\r\n        </div>\r\n\r\n        <Button \r\n            disabled={auctionLoading}\r\n            onClick={auctionHandler}\r\n            variant=\"primary\" \r\n            type=\"submit\">\r\n            <Spinner\r\n                as=\"span\"\r\n                animation=\"border\"\r\n                size=\"sm\"\r\n                role=\"status\"\r\n                aria-hidden=\"true\"\r\n                hidden={!auctionLoading}\r\n            />\r\n            Start Auction\r\n        </Button>\r\n    </Form>\r\n    )\r\n}\r\n\r\nAuctionForms.propTypes = {\r\n  auctionLoading: propTypes.bool,\r\n  currentNft: propTypes.object\r\n};\r\n\r\nfunction mapStateToProps(state) {\r\n  return {\r\n      auctionLoading: state.contracts.auctionLoading,\r\n      currentNft: state.contracts.currentNftId ? state.contracts.nfts[state.contracts.currentNftId-1] : null\r\n  };\r\n}\r\n\r\nexport default compose(\r\n  connect(mapStateToProps, actions)\r\n)(AuctionForms);","import React, { useRef, useState, useEffect } from 'react';\r\nimport { Container, Row, Col, Button, Form, Card, Spinner } from 'react-bootstrap';\r\nimport { previewImage } from '../services/helpers';\r\nimport propTypes from 'prop-types';\r\nimport { connect } from 'react-redux';\r\nimport { compose } from 'redux';\r\nimport * as actions from '../actions/index';\r\nimport { useNavigate } from 'react-router-dom';\r\n\r\n\r\nconst Days365Form = ({currentFee, day365Loading, updateNftUri, mintNft, currentNft}) => {\r\n    const daysFormRef = useRef(null);\r\n    const navigate = useNavigate();\r\n    const [previewImg, setPreview] = useState('placeholder-image.png');\r\n    const [file, setFile] = useState(null);\r\n\r\n    const clearMintingForm = () => {\r\n      if(daysFormRef) \r\n      {\r\n        daysFormRef.current[0].value = null;\r\n        daysFormRef.current[1].value = \"\";\r\n        daysFormRef.current[2].value = 0;\r\n        daysFormRef.current[3].value = \"\";\r\n        setPreview('placeholder-image.png');\r\n        setFile(null);\r\n      }\r\n    }\r\n\r\n    const setDataOnForm = () => {\r\n      if(currentNft && daysFormRef)\r\n      {\r\n        setPreview(currentNft.image);\r\n        daysFormRef.current[1].value = currentNft.description;\r\n        daysFormRef.current[2].value = currentNft.temperature;\r\n        daysFormRef.current[3].value = currentNft.location;\r\n      } \r\n      else \r\n      {\r\n        clearMintingForm();\r\n      }\r\n    }\r\n\r\n    const interactHandler = async (e) => {\r\n        e.preventDefault();\r\n        \r\n        const description = daysFormRef.current[1].value;\r\n        const temperature = daysFormRef.current[2].value;\r\n        const location = daysFormRef.current[3].value;\r\n  \r\n        if(currentNft) {\r\n          updateNftUri(currentNft.id, file, description, temperature, location);\r\n        }\r\n        else {\r\n          mintNft(file, description, temperature, location, (nftId) => {\r\n            navigate(`nfts/${nftId}`);\r\n          });\r\n        }\r\n    }\r\n\r\n    const getButtonDescription = () => {\r\n      switch(!!day365Loading) {\r\n        case true:\r\n          switch(!!currentNft) {\r\n            case true:\r\n              return 'Updating...';\r\n            default:\r\n              return 'Minting...';\r\n          }\r\n        default:\r\n          switch(!!currentNft) {\r\n            case true:\r\n              return 'Update URI';\r\n            default:\r\n              return 'Mint DAY NFT';\r\n          }\r\n      }\r\n    }\r\n\r\n    useEffect(() => {\r\n        setDataOnForm();\r\n    }, [currentNft]);\r\n\r\n    return  (\r\n        <Form ref={daysFormRef}>\r\n        <Container fluid=\"md\">\r\n          <Row className=\"justify-content-md-center\">\r\n            <Col style={{width: '20rem'}} md=\"auto\">\r\n              <Card style={{ width: '18rem' }}>\r\n                <Card.Img id='previewImg' style={{ height: '12rem' }} variant=\"top\" src={previewImg} />\r\n                <Card.Body>\r\n                  <Form.Group className=\"mb-3\" controlId=\"image\">\r\n                    <Form.File \r\n                      onChange={(e) => {previewImage(e, setPreview, setFile)}} \r\n                      accept='image/png, image/jpeg' \r\n                      type=\"file\"\r\n                      label=\"NFT Image\"/>\r\n                  </Form.Group>\r\n                </Card.Body>\r\n              </Card>\r\n            </Col>\r\n            <Col style={!currentNft ? {width: '20rem'} : {}} md=\"auto\">\r\n              <Form.Group className=\"mb-3\" controlId=\"description\">\r\n                <Form.Label>Description</Form.Label>\r\n                <Form.Control type=\"text\" placeholder=\"Description\" />\r\n              </Form.Group>\r\n\r\n              <Form.Group className=\"mb-3\" controlId=\"temperature\">\r\n                <Form.Label>Temperature</Form.Label>\r\n                <Form.Control type=\"number\" placeholder=\"Temperature\" />\r\n              </Form.Group>\r\n\r\n              <Form.Group className=\"mb-3\" controlId=\"location\">\r\n                <Form.Label>Location coordinates</Form.Label>\r\n                <Form.Control type=\"text\" label=\"Location coordinates\" />\r\n              </Form.Group>\r\n\r\n              <Button \r\n                disabled={day365Loading}\r\n                onClick={interactHandler} \r\n                variant=\"primary\" \r\n                type=\"submit\">\r\n                  <Spinner\r\n                    as=\"span\"\r\n                    animation=\"border\"\r\n                    size=\"sm\"\r\n                    role=\"status\"\r\n                    aria-hidden=\"true\"\r\n                    hidden={!day365Loading}\r\n                  />\r\n                  {getButtonDescription()}\r\n              </Button>\r\n              <div hidden={!!currentNft}>{\"Current Fee: \" + currentFee + \" ETH\"}</div>\r\n            </Col>\r\n          </Row>\r\n        </Container>\r\n      </Form>\r\n    )\r\n}\r\n\r\nDays365Form.propTypes = {\r\n  currentFee: propTypes.number,\r\n  day365Loading: propTypes.bool,\r\n  currentNft: propTypes.object\r\n};\r\n\r\nfunction mapStateToProps(state) {\r\nreturn {\r\n    currentFee: state.contracts.currentFee,\r\n    day365Loading: state.contracts.day365Loading,\r\n    currentNft: state.contracts.currentNftId ? state.contracts.nfts[state.contracts.currentNftId-1] : null\r\n};\r\n}\r\n\r\nexport default compose(\r\n  connect(mapStateToProps, actions)\r\n)(Days365Form);","import React from 'react';\r\nimport { Container, Row, Col, Button } from 'react-bootstrap';\r\nimport AuctionForm from './AuctionForm';\r\nimport Days365Form from './Days365Form';\r\nimport propTypes from 'prop-types';\r\nimport { connect } from 'react-redux';\r\nimport { compose } from 'redux';\r\nimport * as actions from '../actions/index';\r\n\r\n\r\nconst ContractForms = ({account, currentNft, contractsInit}) => {\r\n  if(account) \r\n  {\r\n    return  (\r\n      <Container fluid=\"md\">\r\n        <Row className=\"justify-content-md-center\" style={{ height: '20rem' }}>\r\n          <Col md=\"auto\">\r\n            <Days365Form/>\r\n          </Col>\r\n          <Col md=\"auto\" hidden={!currentNft}>\r\n            <AuctionForm/>\r\n          </Col>\r\n        </Row>\r\n      </Container>\r\n    );\r\n  } \r\n  else\r\n  {\r\n    return (\r\n      <Button onClick={\r\n        () => { contractsInit(true) }\r\n      } variant=\"info\">Connect Wallet</Button>\r\n    );\r\n  }\r\n}\r\n\r\nContractForms.propTypes = {\r\n  account: propTypes.string.isRequired,\r\n  currentNft: propTypes.object,\r\n};\r\n\r\nfunction mapStateToProps(state) {\r\nreturn {\r\n    account: state.contracts.account,\r\n    currentNft: state.contracts.currentNftId ? state.contracts.nfts[state.contracts.currentNftId-1] : null\r\n};\r\n}\r\n\r\nexport default compose(\r\n  connect(mapStateToProps, actions)\r\n)(ContractForms);","import React, { useEffect, useState } from 'react';\r\nimport propTypes from 'prop-types';\r\nimport { connect } from 'react-redux';\r\nimport { compose } from 'redux';\r\nimport * as actions from '../actions/index';\r\nimport './Aler.css';\r\nimport { Alert } from 'react-bootstrap';\r\n\r\nfunction CustomAlert({alertMessage}) {\r\n    const [alerts, setAlerts] = useState({\r\n        hidden: true,\r\n        variant: \"primary\",\r\n        message: \"Message\"\r\n    });\r\n    \r\n    const showAllert = ({variant, message}) => {\r\n        if(!message || !variant) return;\r\n\r\n        setAlerts({\r\n            hidden: false,\r\n            variant: variant,\r\n            message: message\r\n        });\r\n\r\n        setTimeout(function() {\r\n            setAlerts({\r\n            hidden: true,\r\n            variant: variant,\r\n            message: message\r\n            });\r\n        }, 4000);\r\n    }\r\n\r\n    useEffect(() => {\r\n        if(alertMessage) {\r\n            showAllert(alertMessage);\r\n        }\r\n    }, [alertMessage]);\r\n    \r\n    return (\r\n        <div className='alert-position slide-top-fade-out' hidden={alerts.hidden}>\r\n            <Alert className='alert-align' variant={alerts.variant}>\r\n                {alerts.message}\r\n            </Alert>\r\n        </div>\r\n    )\r\n}\r\n\r\nCustomAlert.propTypes = {\r\n    alertMessage: propTypes.object\r\n};\r\n\r\nfunction mapStateToProps(state) {\r\n  return {\r\n    alertMessage: state.contracts.alertMessage\r\n  };\r\n}\r\n\r\nexport default compose(\r\n  connect(mapStateToProps, actions)\r\n)(CustomAlert);","import React, { useEffect, useState, useRef } from 'react';\nimport { Container, Row, Navbar, Nav, Image, Form } from 'react-bootstrap';\nimport propTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { compose } from 'redux';\nimport * as actions from '../actions/index';\nimport { identiconAsync } from '../services/identicon';\nimport {\n  Routes,\n  Route\n} from \"react-router-dom\";\n\nimport './App.css';\nimport Footer from './Footer';\nimport NftCarousel from './NftCarousel';\nimport NftDescription from './NftDescription';\nimport { shortHash } from '../services/helpers';\nimport ContractForms from './ContractForms';\nimport Alert from './Alert';\n\nfunction App({account, contractsInit, saveSubscribe, currentNft, switchUpdateChange, switchUpdate}) {\n  const accountRef = useRef(null);\n  const contractRef = useRef(null);\n  const switchRef = useRef(null);\n  const [carouselView, setCarouselView] = useState(0);\n\n  const carouselViewHandler = (idx, e) => {\n    setCarouselView(idx);\n  };\n\n  useEffect(() => {\n    identiconAsync(process.env.REACT_APP_CONTRACT_ADDRESS, 80, contractRef);\n    contractsInit(false);\n    const unsubscibeSave = saveSubscribe();\n    switchRef.current.checked = switchUpdate;\n    \n    return () => {\n      unsubscibeSave();\n    };\n  }, []);\n\n  useEffect(() => {\n    identiconAsync(account, 80, accountRef);\n  }, [account]);\n\n  return (\n    <div>\n      <Alert/>\n\n      <div style={{minHeight: '100vh'}}>\n        <Navbar bg=\"dark\" variant=\"dark\">\n          <Container>\n            <Navbar.Brand href=\"/\">365 DAY NFT</Navbar.Brand>\n            <Nav className=\"me-auto\">\n            <Form style={{color: 'white', margin: 'auto', alignItems: 'center', marginRight: '20px', margin: 'auto', textAlign: 'center'}}>\n              <Form.Switch \n                ref={switchRef}\n                id=\"update-switch\"\n                label=\"Use Update\"\n                onChange={(e) => {switchUpdateChange(e.target.checked)}}\n              />\n            </Form>\n              <Image alt='Contract' ref={contractRef} style={{width: '40px', height: '40px'}} />\n              <Nav.Link href={`https://etherscan.io/address/${process.env.REACT_APP_CONTRACT_ADDRESS}`}>\n                {'Contract: ' + shortHash(process.env.REACT_APP_CONTRACT_ADDRESS.toLowerCase())}\n              </Nav.Link>\n              <Image alt='Account' ref={accountRef} style={{width: '40px', height: '40px'}} />\n              <Nav.Link href={`https://etherscan.io/address/${account}`}>\n                {'Account: ' + shortHash(account)}\n              </Nav.Link>\n            </Nav>\n          </Container>\n        </Navbar>\n\n        <Container fluid=\"md\" style={{width: '100%', marginBottom: '10rem'}}>\n          <Row style={{marginTop: '1rem', width: '100%'}} className=\"justify-content-md-center\">\n              <Routes>\n                <Route path=\"/nfts/:id\" element={\n                  <NftDescription carouselViewHandler={carouselViewHandler}/>\n                }/>\n                <Route path=\"/\" element={\n                  <NftCarousel carouselView={carouselView} onSelect={carouselViewHandler}/>\n                }/>\n              </Routes>\n          </Row>\n          <Row \n            hidden={!!currentNft && account.toLowerCase() !== currentNft.owner.toLowerCase()}\n            style={{marginTop: '1rem', width: '100%'}} \n            className=\"justify-content-md-center\">\n            <ContractForms/>\n          </Row>\n        </Container>\n      </div>\n\n      <Footer/>\n    </div>\n  );\n}\n\nApp.propTypes = {\n    account: propTypes.string.isRequired,\n    currentNft: propTypes.object,\n    switchUpdate: propTypes.bool\n};\n\nfunction mapStateToProps(state) {\n  return {\n      account: state.contracts.account,\n      currentNft: state.contracts.currentNftId ? state.contracts.nfts[state.contracts.currentNftId-1] : null,\n      switchUpdate: state.contracts.switchUpdate\n  };\n}\n\nexport default compose(\n  connect(mapStateToProps, actions)\n)(App);","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import { CONTRACTS_DATA_INIT, AUCTION_UPDATE, NFT_UPDATE, CONTRACTS_UPDATE, SHOW_ALERT } from '../actions/types';\r\n\r\nconst INITIAL_STATE = {\r\n    day365: {},\r\n    auctioner: {},\r\n    account: \"\",\r\n    currentFee: 0,\r\n    nfts: [],\r\n    contractsConnected: false,\r\n    day365Loading: false,\r\n    auctionLoading: false,\r\n    currentNftId: null,\r\n    switchUpdate: false,\r\n    alertMessage: null\r\n}\r\n\r\nexport default (state = INITIAL_STATE, action) => {\r\n    let nftsArr = null;\r\n    let nftIdx = null;\r\n\r\n    switch(action.type) {\r\n        case CONTRACTS_DATA_INIT:\r\n            return {\r\n                ...state,\r\n                day365: action.payload.day365,\r\n                auctioner: action.payload.auctioner,\r\n                account: action.payload.account,\r\n                currentFee: action.payload.currentFee,\r\n                contractsConnected: action.payload.contractsConnected\r\n            }\r\n        case NFT_UPDATE:\r\n            nftsArr = state.nfts;\r\n            nftIdx = action.payload.id-1;\r\n            nftsArr[nftIdx] = {\r\n                ...nftsArr[nftIdx],\r\n                ...action.payload\r\n            };\r\n\r\n            return {\r\n                ...state,\r\n                nfts: [...nftsArr]\r\n            }\r\n        case AUCTION_UPDATE:\r\n            nftsArr = state.nfts;\r\n            nftIdx = action.payload.nftId-1;\r\n            \r\n            let auctionObj = nftsArr[nftIdx].auction;\r\n            auctionObj = {\r\n                ...auctionObj,\r\n                ...action.payload\r\n            };\r\n            nftsArr[nftIdx].auction = auctionObj;\r\n\r\n            return {\r\n                ...state,\r\n                nfts: [...nftsArr]\r\n            }\r\n        case CONTRACTS_UPDATE:\r\n            return {\r\n                ...state,\r\n                ...action.payload\r\n            }\r\n        case SHOW_ALERT:\r\n            return {\r\n                ...state,\r\n                alertMessage: {...action.payload}\r\n            }\r\n        default:\r\n            return state;\r\n    }\r\n}","import { combineReducers } from 'redux';\r\n//import { reducer as formReducer } from 'redux-form';\r\nimport contracts from './contracts';\r\n\r\nexport default combineReducers({\r\n    contracts\r\n    //form: formReducer\r\n});","import { createStore, applyMiddleware } from 'redux';\r\nimport { composeWithDevTools } from 'redux-devtools-extension'\r\nimport reduxThunk from 'redux-thunk';\r\nimport combineReducers from '../reducers/index';\r\nimport throttle from 'lodash/throttle';\r\n\r\nconst loadState = () => {\r\n    try {\r\n      const day365Nfts = localStorage.getItem('day365Nfts');\r\n      if (day365Nfts === null) {\r\n        return undefined;\r\n      }\r\n      return {\r\n        contracts: {\r\n            day365: {},\r\n            auctioner: {},\r\n            account: \"\",\r\n            currentFee: 0,\r\n            nfts: JSON.parse(day365Nfts),\r\n            contractsConnected: false,\r\n            day365Loading: false,\r\n            auctionLoading: false,\r\n            currentNftId: JSON.parse(localStorage.getItem('currentNftId')),\r\n            switchUpdate: JSON.parse(localStorage.getItem('switchUpdate')),\r\n            alertMessage: null\r\n        }}\r\n    } catch (err) {\r\n      return undefined;\r\n    }\r\n};\r\n\r\nconst saveState = (state) => {\r\n    try {\r\n      localStorage.setItem('day365Nfts', JSON.stringify(state.contracts.nfts));\r\n      localStorage.setItem('currentNftId', JSON.stringify(state.contracts.currentNftId));\r\n      localStorage.setItem('switchUpdate', JSON.stringify(state.contracts.switchUpdate));\r\n    } catch {\r\n      // ignore write errors\r\n    }\r\n};\r\n\r\nconst composedEnhancer = composeWithDevTools(\r\n    applyMiddleware(reduxThunk)\r\n);\r\n\r\nconst store = createStore(combineReducers, loadState(), composedEnhancer);\r\n\r\nconst saveSubscribe = () => { \r\n  return store.subscribe(throttle(() => {\r\n      saveState({\r\n          contracts: store.getState().contracts\r\n      });\r\n  }, 1000));\r\n}\r\n\r\nexport { store, saveSubscribe };","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.css'\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\nimport { BrowserRouter} from \"react-router-dom\";\n\nimport { Provider } from 'react-redux';\nimport { store, saveSubscribe } from './services/configureStore';\n\nReactDOM.render(\n    <Provider store={store}>\n        <BrowserRouter>\n            <App saveSubscribe={saveSubscribe}/>\n        </BrowserRouter>\n    </Provider>\n, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import { ethers } from \"ethers\";\r\n\r\nconst shortHash = (hash) => {\r\n    return hash ? hash.slice(0, 5) + \"...\" + hash.slice(hash.length-4, hash.length) : \"None\";\r\n}\r\n\r\nconst getOwner = (nft, account, showFull) =>{\r\n    if(nft.owner.toLowerCase() === account.toLowerCase())\r\n        return \"You\";\r\n    else if(nft.owner.toLowerCase() === process.env.REACT_APP_AUCTIONER_ADDRESS.toLowerCase())\r\n        return \"On Auction\";\r\n    else if(showFull)\r\n        return nft.owner;\r\n    else\r\n        return shortHash(nft.owner);\r\n}\r\n\r\nconst checkWalletAddress = (wallet, user, showFull) =>{\r\n    if(wallet.toLowerCase() === user.toLowerCase())\r\n        return \"You\";\r\n    else if(wallet.toLowerCase() === process.env.REACT_APP_AUCTIONER_ADDRESS.toLowerCase())\r\n        return \"Auction\";\r\n    else if(showFull)\r\n        return wallet.toLowerCase();\r\n    else\r\n        return shortHash(wallet.toLowerCase());\r\n}\r\n\r\nconst getDateFromMiliseconds = (miliseconds) =>{\r\n    const date = new Date(miliseconds);\r\n    const monthString = '0' + (date.getMonth()+1).toString();\r\n    return date.getDate() + '.' + monthString.substring(monthString.length-2) + '.' + date.getFullYear() + ' ' + date.getHours() + ':' + date.getMinutes();\r\n}\r\n\r\nconst previewImage = (e, setPreview, setFile) => {\r\n    const file = e.target.files[0];\r\n    if (file) {\r\n      setPreview(URL.createObjectURL(file));\r\n      setFile(file);\r\n    }\r\n}\r\n\r\nconst getIpfsLink = (hash, filenmae) => {\r\n    return `${process.env.REACT_APP_IPFS_ADDRESS}${hash}?filename=${filenmae}`;\r\n}\r\n\r\nconst getBuffer = (file) => {\r\n    return new Promise((resolve, reject) => {\r\n      const reader = new FileReader();\r\n      reader.readAsArrayBuffer(file);\r\n      reader.onload = () => resolve(Buffer.from(reader.result));\r\n      reader.onerror = error => reject(error);\r\n    });\r\n}\r\n\r\nconst getBufferFromJson = (fileJson) => {\r\n    let json = JSON.stringify(fileJson);\r\n    const blob = new Blob([json], {type:\"application/json\"});\r\n\r\n    return new Promise((resolve, reject) => {\r\n      const reader = new FileReader();\r\n      reader.readAsArrayBuffer(blob);\r\n      reader.onload = () => resolve(Buffer.from(reader.result));\r\n      reader.onerror = error => reject(error);\r\n    });\r\n}\r\n\r\nconst getDefaultNft = (id) => {\r\n    return {\r\n        id: id,\r\n        uri: \"\",\r\n        name: \"\",\r\n        description: \"\",\r\n        image: \"\",\r\n        location: \"\",\r\n        temperature: 0,\r\n        owner: ethers.constants.AddressZero,\r\n        isLoading: false,\r\n        wasInit: false,\r\n        auction: getDefaultAuction(id)\r\n    };\r\n}\r\n\r\nconst getDefaultAuction = (id) => {\r\n    return {\r\n        nftId: id,\r\n        owner: ethers.constants.AddressZero,\r\n        timestamp: 0,\r\n        price: 0,\r\n        winner: ethers.constants.AddressZero,\r\n        isWinner: false,\r\n        isStarted: false,\r\n        isEnded: false,\r\n        isOwner: false,\r\n        totalBid: 0,\r\n        wasInit: false\r\n    };\r\n}\r\n\r\nconst getMetadata = (name, description, image, location, temperature) => {\r\n    return {\r\n        name: name,\r\n        description: description,\r\n        image: image,\r\n        attributes: [\r\n            {\r\n                trait_type: \"location\",\r\n                value: location\r\n            },\r\n            {\r\n                trait_type: \"temperature\",\r\n                value: temperature\r\n            }\r\n        ]\r\n    }\r\n}\r\n\r\nexport {\r\n    getOwner,\r\n    shortHash,\r\n    getIpfsLink,\r\n    getBuffer,\r\n    getBufferFromJson,\r\n    previewImage,\r\n    getDateFromMiliseconds,\r\n    checkWalletAddress,\r\n    getDefaultAuction,\r\n    getDefaultNft,\r\n    getMetadata\r\n};"],"sourceRoot":""}